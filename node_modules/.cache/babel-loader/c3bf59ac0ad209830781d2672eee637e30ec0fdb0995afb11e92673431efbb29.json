{"ast":null,"code":"import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/escape';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([$.AREA, $.BASE, $.BASEFONT, $.BGSOUND, $.BR, $.COL, $.EMBED, $.FRAME, $.HR, $.IMG, $.INPUT, $.KEYGEN, $.LINK, $.META, $.PARAM, $.SOURCE, $.TRACK, $.WBR]);\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nconst defaultOpts = {\n  treeAdapter: defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n  const opts = {\n    ...defaultOpts,\n    ...options\n  };\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n  return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n  const opts = {\n    ...defaultOpts,\n    ...options\n  };\n  return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n  let html = '';\n  // Get container of the child nodes\n  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === $.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  const childNodes = options.treeAdapter.getChildNodes(container);\n  if (childNodes) {\n    for (const currentNode of childNodes) {\n      html += serializeNode(currentNode, options);\n    }\n  }\n  return html;\n}\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  }\n  // Return an empty string for unknown nodes\n  return '';\n}\nfunction serializeElement(node, options) {\n  const tn = options.treeAdapter.getTagName(node);\n  return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, {\n  treeAdapter\n}) {\n  let html = '';\n  for (const attr of treeAdapter.getAttrList(node)) {\n    html += ' ';\n    if (attr.namespace) {\n      switch (attr.namespace) {\n        case NS.XML:\n          {\n            html += `xml:${attr.name}`;\n            break;\n          }\n        case NS.XMLNS:\n          {\n            if (attr.name !== 'xmlns') {\n              html += 'xmlns:';\n            }\n            html += attr.name;\n            break;\n          }\n        case NS.XLINK:\n          {\n            html += `xlink:${attr.name}`;\n            break;\n          }\n        default:\n          {\n            html += `${attr.prefix}:${attr.name}`;\n          }\n      }\n    } else {\n      html += attr.name;\n    }\n    html += `=\"${escapeAttribute(attr.value)}\"`;\n  }\n  return html;\n}\nfunction serializeTextNode(node, options) {\n  const {\n    treeAdapter\n  } = options;\n  const content = treeAdapter.getTextNodeContent(node);\n  const parent = treeAdapter.getParentNode(node);\n  const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText(content);\n}\nfunction serializeCommentNode(node, {\n  treeAdapter\n}) {\n  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, {\n  treeAdapter\n}) {\n  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}","map":{"version":3,"names":["TAG_NAMES","$","NS","hasUnescapedText","escapeText","escapeAttribute","defaultTreeAdapter","VOID_ELEMENTS","Set","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","HTML","has","getTagName","defaultOpts","scriptingEnabled","serialize","opts","serializeChildNodes","serializeOuter","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","serializeAttributes","attr","getAttrList","namespace","XML","name","XMLNS","XLINK","prefix","value","content","getTextNodeContent","parent","getParentNode","parentTn","getCommentNodeContent","getDocumentTypeNodeName"],"sources":["C:/Users/Owner/certifystack/node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js"],"sourcesContent":["import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/escape';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}