{"ast":null,"code":"import { Parser } from './parser/index.js';\nexport { defaultTreeAdapter } from './tree-adapters/default.js';\nexport { /** @internal */Parser } from './parser/index.js';\nexport { serialize, serializeOuter } from './serializer/index.js';\nexport { ERR as ErrorCodes } from './common/error-codes.js';\n/** @internal */\nimport * as _foreignContent from './common/foreign-content.js';\nexport { _foreignContent as foreignContent };\nimport * as _html from './common/html.js';\nexport { _html as html };\nimport * as _Token from './common/token.js';\nexport { _Token as Token };\n/** @internal */\nexport { Tokenizer, TokenizerMode } from './tokenizer/index.js';\n// Shorthands\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */\nexport function parse(html, options) {\n  return Parser.parse(html, options);\n}\nexport function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n  const parser = Parser.getFragmentParser(fragmentContext, options);\n  parser.tokenizer.write(html, true);\n  return parser.getFragment();\n}","map":{"version":3,"names":["Parser","defaultTreeAdapter","serialize","serializeOuter","ERR","ErrorCodes","_foreignContent","foreignContent","_html","html","_Token","Token","Tokenizer","TokenizerMode","parse","options","parseFragment","fragmentContext","parser","getFragmentParser","tokenizer","write","getFragment"],"sources":["C:/Users/Owner/certifystack/node_modules/hast-util-raw/node_modules/parse5/dist/index.js"],"sourcesContent":["import { Parser } from './parser/index.js';\nexport { defaultTreeAdapter } from './tree-adapters/default.js';\nexport { /** @internal */ Parser } from './parser/index.js';\nexport { serialize, serializeOuter } from './serializer/index.js';\nexport { ERR as ErrorCodes } from './common/error-codes.js';\n/** @internal */\nexport * as foreignContent from './common/foreign-content.js';\nexport * as html from './common/html.js';\nexport * as Token from './common/token.js';\n/** @internal */\nexport { Tokenizer, TokenizerMode } from './tokenizer/index.js';\n// Shorthands\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */\nexport function parse(html, options) {\n    return Parser.parse(html, options);\n}\nexport function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n    const parser = Parser.getFragmentParser(fragmentContext, options);\n    parser.tokenizer.write(html, true);\n    return parser.getFragment();\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAAS,gBAAiBD,MAAM,QAAQ,mBAAmB;AAC3D,SAASE,SAAS,EAAEC,cAAc,QAAQ,uBAAuB;AACjE,SAASC,GAAG,IAAIC,UAAU,QAAQ,yBAAyB;AAC3D;AAAA,YAAAC,eAAA,MACgC,6BAA6B;AAAA,SAAAA,eAAA,IAAjDC,cAAc;AAAA,YAAAC,KAAA,MACJ,kBAAkB;AAAA,SAAAA,KAAA,IAA5BC,IAAI;AAAA,YAAAC,MAAA,MACO,mBAAmB;AAAA,SAAAA,MAAA,IAA9BC,KAAK;AACjB;AACA,SAASC,SAAS,EAAEC,aAAa,QAAQ,sBAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACL,IAAI,EAAEM,OAAO,EAAE;EACjC,OAAOf,MAAM,CAACc,KAAK,CAACL,IAAI,EAAEM,OAAO,CAAC;AACtC;AACA,OAAO,SAASC,aAAaA,CAACC,eAAe,EAAER,IAAI,EAAEM,OAAO,EAAE;EAC1D,IAAI,OAAOE,eAAe,KAAK,QAAQ,EAAE;IACrCF,OAAO,GAAGN,IAAI;IACdA,IAAI,GAAGQ,eAAe;IACtBA,eAAe,GAAG,IAAI;EAC1B;EACA,MAAMC,MAAM,GAAGlB,MAAM,CAACmB,iBAAiB,CAACF,eAAe,EAAEF,OAAO,CAAC;EACjEG,MAAM,CAACE,SAAS,CAACC,KAAK,CAACZ,IAAI,EAAE,IAAI,CAAC;EAClC,OAAOS,MAAM,CAACI,WAAW,CAAC,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}