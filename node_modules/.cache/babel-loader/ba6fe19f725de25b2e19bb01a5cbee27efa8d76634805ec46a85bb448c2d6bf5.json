{"ast":null,"code":"import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint } from '../common/unicode.js';\nimport { TokenType, getTokenAttr } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/decode';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n  if (code === $.NULL) {\n    return ERR.nullCharacterReference;\n  } else if (code > 1114111) {\n    return ERR.characterReferenceOutsideUnicodeRange;\n  } else if (isSurrogate(code)) {\n    return ERR.surrogateCharacterReference;\n  } else if (isUndefinedCodePoint(code)) {\n    return ERR.noncharacterCharacterReference;\n  } else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n    return ERR.controlCharacterReference;\n  }\n  return null;\n}\n//Tokenizer\nexport class Tokenizer {\n  constructor(options, handler) {\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.entityStartPos = 0;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n    this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n      // Note: Set `pos` _before_ flushing, as flushing might drop\n      // the current chunk and invalidate `entityStartPos`.\n      this.preprocessor.pos = this.entityStartPos + consumed - 1;\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    }, handler.onParseError ? {\n      missingSemicolonAfterCharacterReference: () => {\n        this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n      },\n      absenceOfDigitsInNumericCharacterReference: consumed => {\n        this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n      },\n      validateNumericCharacterReference: code => {\n        const error = getErrorForNumericCharacterReference(code);\n        if (error) this._err(error, 1);\n      }\n    } : undefined);\n  }\n  //Errors\n  _err(code, cpOffset = 0) {\n    var _a, _b;\n    (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n  }\n  // NOTE: `offset` may never run across line boundaries.\n  getCurrentLocation(offset) {\n    if (!this.options.sourceCodeLocationInfo) {\n      return null;\n    }\n    return {\n      startLine: this.preprocessor.line,\n      startCol: this.preprocessor.col - offset,\n      startOffset: this.preprocessor.offset - offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    };\n  }\n  _runParsingLoop() {\n    if (this.inLoop) return;\n    this.inLoop = true;\n    while (this.active && !this.paused) {\n      this.consumedAfterSnapshot = 0;\n      const cp = this._consume();\n      if (!this._ensureHibernation()) {\n        this._callState(cp);\n      }\n    }\n    this.inLoop = false;\n  }\n  //API\n  pause() {\n    this.paused = true;\n  }\n  resume(writeCallback) {\n    if (!this.paused) {\n      throw new Error('Parser was already resumed');\n    }\n    this.paused = false;\n    // Necessary for synchronous resume.\n    if (this.inLoop) return;\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  write(chunk, isLastChunk, writeCallback) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    this._runParsingLoop();\n  }\n  //Hibernation\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      this.preprocessor.retreat(this.consumedAfterSnapshot);\n      this.consumedAfterSnapshot = 0;\n      this.active = false;\n      return true;\n    }\n    return false;\n  }\n  //Consumption\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n  _advanceBy(count) {\n    this.consumedAfterSnapshot += count;\n    for (let i = 0; i < count; i++) {\n      this.preprocessor.advance();\n    }\n  }\n  _consumeSequenceIfMatch(pattern, caseSensitive) {\n    if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n      // We will already have consumed one character before calling this method.\n      this._advanceBy(pattern.length - 1);\n      return true;\n    }\n    return false;\n  }\n  //Token creation\n  _createStartTagToken() {\n    this.currentToken = {\n      type: TokenType.START_TAG,\n      tagName: '',\n      tagID: TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(1)\n    };\n  }\n  _createEndTagToken() {\n    this.currentToken = {\n      type: TokenType.END_TAG,\n      tagName: '',\n      tagID: TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(2)\n    };\n  }\n  _createCommentToken(offset) {\n    this.currentToken = {\n      type: TokenType.COMMENT,\n      data: '',\n      location: this.getCurrentLocation(offset)\n    };\n  }\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: TokenType.DOCTYPE,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null,\n      location: this.currentLocation\n    };\n  }\n  _createCharacterToken(type, chars) {\n    this.currentCharacterToken = {\n      type,\n      chars,\n      location: this.currentLocation\n    };\n  }\n  //Tag attributes\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n    this.currentLocation = this.getCurrentLocation(0);\n  }\n  _leaveAttrName() {\n    var _a;\n    var _b;\n    const token = this.currentToken;\n    if (getTokenAttr(token, this.currentAttr.name) === null) {\n      token.attrs.push(this.currentAttr);\n      if (token.location && this.currentLocation) {\n        const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n        attrLocations[this.currentAttr.name] = this.currentLocation;\n        // Set end location\n        this._leaveAttrValue();\n      }\n    } else {\n      this._err(ERR.duplicateAttribute);\n    }\n  }\n  _leaveAttrValue() {\n    if (this.currentLocation) {\n      this.currentLocation.endLine = this.preprocessor.line;\n      this.currentLocation.endCol = this.preprocessor.col;\n      this.currentLocation.endOffset = this.preprocessor.offset;\n    }\n  }\n  //Token emission\n  prepareToken(ct) {\n    this._emitCurrentCharacterToken(ct.location);\n    this.currentToken = null;\n    if (ct.location) {\n      ct.location.endLine = this.preprocessor.line;\n      ct.location.endCol = this.preprocessor.col + 1;\n      ct.location.endOffset = this.preprocessor.offset + 1;\n    }\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n  emitCurrentTagToken() {\n    const ct = this.currentToken;\n    this.prepareToken(ct);\n    ct.tagID = getTagID(ct.tagName);\n    if (ct.type === TokenType.START_TAG) {\n      this.lastStartTagName = ct.tagName;\n      this.handler.onStartTag(ct);\n    } else {\n      if (ct.attrs.length > 0) {\n        this._err(ERR.endTagWithAttributes);\n      }\n      if (ct.selfClosing) {\n        this._err(ERR.endTagWithTrailingSolidus);\n      }\n      this.handler.onEndTag(ct);\n    }\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentComment(ct) {\n    this.prepareToken(ct);\n    this.handler.onComment(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentDoctype(ct) {\n    this.prepareToken(ct);\n    this.handler.onDoctype(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  _emitCurrentCharacterToken(nextLocation) {\n    if (this.currentCharacterToken) {\n      //NOTE: if we have a pending character token, make it's end location equal to the\n      //current token's start location.\n      if (nextLocation && this.currentCharacterToken.location) {\n        this.currentCharacterToken.location.endLine = nextLocation.startLine;\n        this.currentCharacterToken.location.endCol = nextLocation.startCol;\n        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n      }\n      switch (this.currentCharacterToken.type) {\n        case TokenType.CHARACTER:\n          {\n            this.handler.onCharacter(this.currentCharacterToken);\n            break;\n          }\n        case TokenType.NULL_CHARACTER:\n          {\n            this.handler.onNullCharacter(this.currentCharacterToken);\n            break;\n          }\n        case TokenType.WHITESPACE_CHARACTER:\n          {\n            this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n            break;\n          }\n      }\n      this.currentCharacterToken = null;\n    }\n  }\n  _emitEOFToken() {\n    const location = this.getCurrentLocation(0);\n    if (location) {\n      location.endLine = location.startLine;\n      location.endCol = location.startCol;\n      location.endOffset = location.startOffset;\n    }\n    this._emitCurrentCharacterToken(location);\n    this.handler.onEof({\n      type: TokenType.EOF,\n      location\n    });\n    this.active = false;\n  }\n  //Characters emission\n  //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, the parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken) {\n      if (this.currentCharacterToken.type === type) {\n        this.currentCharacterToken.chars += ch;\n        return;\n      } else {\n        this.currentLocation = this.getCurrentLocation(0);\n        this._emitCurrentCharacterToken(this.currentLocation);\n        this.preprocessor.dropParsedChunk();\n      }\n    }\n    this._createCharacterToken(type, ch);\n  }\n  _emitCodePoint(cp) {\n    const type = isWhitespace(cp) ? TokenType.WHITESPACE_CHARACTER : cp === $.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;\n    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n  }\n  //NOTE: used when we emit characters explicitly.\n  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n  }\n  // Character reference helpers\n  _startCharacterReference() {\n    this.returnState = this.state;\n    this.state = State.CHARACTER_REFERENCE;\n    this.entityStartPos = this.preprocessor.pos;\n    this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n  }\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n  }\n  _flushCodePointConsumedAsCharacterReference(cp) {\n    if (this._isCharacterReferenceInAttribute()) {\n      this.currentAttr.value += String.fromCodePoint(cp);\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n  // Calling states this way turns out to be much faster than any other approach.\n  _callState(cp) {\n    switch (this.state) {\n      case State.DATA:\n        {\n          this._stateData(cp);\n          break;\n        }\n      case State.RCDATA:\n        {\n          this._stateRcdata(cp);\n          break;\n        }\n      case State.RAWTEXT:\n        {\n          this._stateRawtext(cp);\n          break;\n        }\n      case State.SCRIPT_DATA:\n        {\n          this._stateScriptData(cp);\n          break;\n        }\n      case State.PLAINTEXT:\n        {\n          this._statePlaintext(cp);\n          break;\n        }\n      case State.TAG_OPEN:\n        {\n          this._stateTagOpen(cp);\n          break;\n        }\n      case State.END_TAG_OPEN:\n        {\n          this._stateEndTagOpen(cp);\n          break;\n        }\n      case State.TAG_NAME:\n        {\n          this._stateTagName(cp);\n          break;\n        }\n      case State.RCDATA_LESS_THAN_SIGN:\n        {\n          this._stateRcdataLessThanSign(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_OPEN:\n        {\n          this._stateRcdataEndTagOpen(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_NAME:\n        {\n          this._stateRcdataEndTagName(cp);\n          break;\n        }\n      case State.RAWTEXT_LESS_THAN_SIGN:\n        {\n          this._stateRawtextLessThanSign(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_OPEN:\n        {\n          this._stateRawtextEndTagOpen(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_NAME:\n        {\n          this._stateRawtextEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_OPEN:\n        {\n          this._stateScriptDataEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_NAME:\n        {\n          this._stateScriptDataEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START:\n        {\n          this._stateScriptDataEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START_DASH:\n        {\n          this._stateScriptDataEscapeStartDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED:\n        {\n          this._stateScriptDataEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH:\n        {\n          this._stateScriptDataEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n        {\n          this._stateScriptDataEscapedEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n        {\n          this._stateScriptDataEscapedEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n        {\n          this._stateScriptDataDoubleEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n        {\n          this._stateScriptDataDoubleEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataDoubleEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n        {\n          this._stateScriptDataDoubleEscapeEnd(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_NAME:\n        {\n          this._stateBeforeAttributeName(cp);\n          break;\n        }\n      case State.ATTRIBUTE_NAME:\n        {\n          this._stateAttributeName(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_NAME:\n        {\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_VALUE:\n        {\n          this._stateBeforeAttributeValue(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n        {\n          this._stateAttributeValueDoubleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n        {\n          this._stateAttributeValueSingleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_UNQUOTED:\n        {\n          this._stateAttributeValueUnquoted(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n        {\n          this._stateAfterAttributeValueQuoted(cp);\n          break;\n        }\n      case State.SELF_CLOSING_START_TAG:\n        {\n          this._stateSelfClosingStartTag(cp);\n          break;\n        }\n      case State.BOGUS_COMMENT:\n        {\n          this._stateBogusComment(cp);\n          break;\n        }\n      case State.MARKUP_DECLARATION_OPEN:\n        {\n          this._stateMarkupDeclarationOpen(cp);\n          break;\n        }\n      case State.COMMENT_START:\n        {\n          this._stateCommentStart(cp);\n          break;\n        }\n      case State.COMMENT_START_DASH:\n        {\n          this._stateCommentStartDash(cp);\n          break;\n        }\n      case State.COMMENT:\n        {\n          this._stateComment(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN:\n        {\n          this._stateCommentLessThanSign(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG:\n        {\n          this._stateCommentLessThanSignBang(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n        {\n          this._stateCommentLessThanSignBangDash(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n        {\n          this._stateCommentLessThanSignBangDashDash(cp);\n          break;\n        }\n      case State.COMMENT_END_DASH:\n        {\n          this._stateCommentEndDash(cp);\n          break;\n        }\n      case State.COMMENT_END:\n        {\n          this._stateCommentEnd(cp);\n          break;\n        }\n      case State.COMMENT_END_BANG:\n        {\n          this._stateCommentEndBang(cp);\n          break;\n        }\n      case State.DOCTYPE:\n        {\n          this._stateDoctype(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_NAME:\n        {\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case State.DOCTYPE_NAME:\n        {\n          this._stateDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_NAME:\n        {\n          this._stateAfterDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n        {\n          this._stateAfterDoctypePublicKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateBeforeDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateAfterDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n        {\n          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n        {\n          this._stateAfterDoctypeSystemKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateBeforeDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateAfterDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.BOGUS_DOCTYPE:\n        {\n          this._stateBogusDoctype(cp);\n          break;\n        }\n      case State.CDATA_SECTION:\n        {\n          this._stateCdataSection(cp);\n          break;\n        }\n      case State.CDATA_SECTION_BRACKET:\n        {\n          this._stateCdataSectionBracket(cp);\n          break;\n        }\n      case State.CDATA_SECTION_END:\n        {\n          this._stateCdataSectionEnd(cp);\n          break;\n        }\n      case State.CHARACTER_REFERENCE:\n        {\n          this._stateCharacterReference();\n          break;\n        }\n      case State.AMBIGUOUS_AMPERSAND:\n        {\n          this._stateAmbiguousAmpersand(cp);\n          break;\n        }\n      default:\n        {\n          throw new Error('Unknown state');\n        }\n    }\n  }\n  // State machine\n  // Data state\n  //------------------------------------------------------------------\n  _stateData(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.TAG_OPEN;\n          break;\n        }\n      case $.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitCodePoint(cp);\n          break;\n        }\n      case $.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  //  RCDATA state\n  //------------------------------------------------------------------\n  _stateRcdata(cp) {\n    switch (cp) {\n      case $.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.RCDATA_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // RAWTEXT state\n  //------------------------------------------------------------------\n  _stateRawtext(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.RAWTEXT_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data state\n  //------------------------------------------------------------------\n  _stateScriptData(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // PLAINTEXT state\n  //------------------------------------------------------------------\n  _statePlaintext(cp) {\n    switch (cp) {\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Tag open state\n  //------------------------------------------------------------------\n  _stateTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.MARKUP_DECLARATION_OPEN;\n          break;\n        }\n      case $.SOLIDUS:\n        {\n          this.state = State.END_TAG_OPEN;\n          break;\n        }\n      case $.QUESTION_MARK:\n        {\n          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n          this._createCommentToken(1);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofBeforeTagName);\n          this._emitChars('<');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.invalidFirstCharacterOfTagName);\n          this._emitChars('<');\n          this.state = State.DATA;\n          this._stateData(cp);\n        }\n    }\n  }\n  // End tag open state\n  //------------------------------------------------------------------\n  _stateEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingEndTagName);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofBeforeTagName);\n          this._emitChars('</');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.invalidFirstCharacterOfTagName);\n          this._createCommentToken(2);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n        }\n    }\n  }\n  // Tag name state\n  //------------------------------------------------------------------\n  _stateTagName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case $.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.tagName += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // RCDATA less-than sign state\n  //------------------------------------------------------------------\n  _stateRcdataLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.RCDATA_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RCDATA end tag open state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RCDATA_END_TAG_NAME;\n      this._stateRcdataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  handleSpecialEndTag(_cp) {\n    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n      return !this._ensureHibernation();\n    }\n    this._createEndTagToken();\n    const token = this.currentToken;\n    token.tagName = this.lastStartTagName;\n    const cp = this.preprocessor.peek(this.lastStartTagName.length);\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          return false;\n        }\n      case $.SOLIDUS:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.SELF_CLOSING_START_TAG;\n          return false;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.emitCurrentTagToken();\n          this.state = State.DATA;\n          return false;\n        }\n      default:\n        {\n          return !this._ensureHibernation();\n        }\n    }\n  }\n  // RCDATA end tag name state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n  _stateRawtextLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.RAWTEXT_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RAWTEXT_END_TAG_NAME;\n      this._stateRawtextEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // Script data less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataLessThanSign(cp) {\n    switch (cp) {\n      case $.SOLIDUS:\n        {\n          this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n          break;\n        }\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPE_START;\n          this._emitChars('<!');\n          break;\n        }\n      default:\n        {\n          this._emitChars('<');\n          this.state = State.SCRIPT_DATA;\n          this._stateScriptData(cp);\n        }\n    }\n  }\n  // Script data end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_END_TAG_NAME;\n      this._stateScriptDataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStart(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStartDash(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataEscaped(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDashDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n    } else if (isAsciiLetter(cp)) {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n      this._stateScriptDataDoubleEscapeStart(cp);\n    } else {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n      this._stateScriptDataEscapedEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeStart(cp) {\n    if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < $$.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscaped(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDashDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(REPLACEMENT_CHARACTER);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n      this._emitChars('/');\n    } else {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Script data double escape end state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeEnd(cp) {\n    if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < $$.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Before attribute name state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.SOLIDUS:\n      case $.GREATER_THAN_SIGN:\n      case $.EOF:\n        {\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case $.EQUALS_SIGN:\n        {\n          this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n          this._createAttr('=');\n          this.state = State.ATTRIBUTE_NAME;\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Attribute name state\n  //------------------------------------------------------------------\n  _stateAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n      case $.SOLIDUS:\n      case $.GREATER_THAN_SIGN:\n      case $.EOF:\n        {\n          this._leaveAttrName();\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case $.EQUALS_SIGN:\n        {\n          this._leaveAttrName();\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case $.QUOTATION_MARK:\n      case $.APOSTROPHE:\n      case $.LESS_THAN_SIGN:\n        {\n          this._err(ERR.unexpectedCharacterInAttributeName);\n          this.currentAttr.name += String.fromCodePoint(cp);\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.currentAttr.name += REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After attribute name state\n  //------------------------------------------------------------------\n  _stateAfterAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case $.EQUALS_SIGN:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Before attribute value state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeValue(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingAttributeValue);\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this._stateAttributeValueUnquoted(cp);\n        }\n    }\n  }\n  // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueDoubleQuoted(cp) {\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case $.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueSingleQuoted(cp) {\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case $.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueUnquoted(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case $.AMPERSAND:\n        {\n          this._startCharacterReference();\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.QUOTATION_MARK:\n      case $.APOSTROPHE:\n      case $.LESS_THAN_SIGN:\n      case $.EQUALS_SIGN:\n      case $.GRAVE_ACCENT:\n        {\n          this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n          this.currentAttr.value += String.fromCodePoint(cp);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After attribute value (quoted) state\n  //------------------------------------------------------------------\n  _stateAfterAttributeValueQuoted(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case $.SOLIDUS:\n        {\n          this._leaveAttrValue();\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingWhitespaceBetweenAttributes);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Self-closing start tag state\n  //------------------------------------------------------------------\n  _stateSelfClosingStartTag(cp) {\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          const token = this.currentToken;\n          token.selfClosing = true;\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.unexpectedSolidusInTag);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Bogus comment state\n  //------------------------------------------------------------------\n  _stateBogusComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.data += REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Markup declaration open state\n  //------------------------------------------------------------------\n  _stateMarkupDeclarationOpen(cp) {\n    if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n      this._createCommentToken($$.DASH_DASH.length + 1);\n      this.state = State.COMMENT_START;\n    } else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n      // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n      this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n      this.state = State.DOCTYPE;\n    } else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n      if (this.inForeignNode) {\n        this.state = State.CDATA_SECTION;\n      } else {\n        this._err(ERR.cdataInHtmlContent);\n        this._createCommentToken($$.CDATA_START.length + 1);\n        this.currentToken.data = '[CDATA[';\n        this.state = State.BOGUS_COMMENT;\n      }\n    }\n    //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.incorrectlyOpenedComment);\n      this._createCommentToken(2);\n      this.state = State.BOGUS_COMMENT;\n      this._stateBogusComment(cp);\n    }\n  }\n  // Comment start state\n  //------------------------------------------------------------------\n  _stateCommentStart(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_START_DASH;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          const token = this.currentToken;\n          this.emitCurrentComment(token);\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment start dash state\n  //------------------------------------------------------------------\n  _stateCommentStartDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment state\n  //------------------------------------------------------------------\n  _stateComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          this.state = State.COMMENT_LESS_THAN_SIGN;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.data += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Comment less-than sign state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSign(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.EXCLAMATION_MARK:\n        {\n          token.data += '!';\n          this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n          break;\n        }\n      case $.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment less-than sign bang state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBang(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n    } else {\n      this.state = State.COMMENT;\n      this._stateComment(cp);\n    }\n  }\n  // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDash(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n    } else {\n      this.state = State.COMMENT_END_DASH;\n      this._stateCommentEndDash(cp);\n    }\n  }\n  // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDashDash(cp) {\n    if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n      this._err(ERR.nestedComment);\n    }\n    this.state = State.COMMENT_END;\n    this._stateCommentEnd(cp);\n  }\n  // Comment end dash state\n  //------------------------------------------------------------------\n  _stateCommentEndDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end state\n  //------------------------------------------------------------------\n  _stateCommentEnd(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.COMMENT_END_BANG;\n          break;\n        }\n      case $.HYPHEN_MINUS:\n        {\n          token.data += '-';\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end bang state\n  //------------------------------------------------------------------\n  _stateCommentEndBang(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.incorrectlyClosedComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // DOCTYPE state\n  //------------------------------------------------------------------\n  _stateDoctype(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingWhitespaceBeforeDoctypeName);\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n        }\n    }\n  }\n  // Before DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeName(cp) {\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n      this.state = State.DOCTYPE_NAME;\n    } else switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          this._createDoctypeToken(REPLACEMENT_CHARACTER);\n          this.state = State.DOCTYPE_NAME;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeName);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createDoctypeToken(String.fromCodePoint(cp));\n          this.state = State.DOCTYPE_NAME;\n        }\n    }\n  }\n  // DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.AFTER_DOCTYPE_NAME;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.name += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n          } else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n          }\n          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n          //results are no longer valid and we will need to start over.\n          else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n        }\n    }\n  }\n  // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.publicId += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.publicId += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case $.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.systemId += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          token.systemId += REPLACEMENT_CHARACTER;\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n  _stateBogusDoctype(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n          break;\n        }\n      case $.EOF:\n        {\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  // CDATA section state\n  //------------------------------------------------------------------\n  _stateCdataSection(cp) {\n    switch (cp) {\n      case $.RIGHT_SQUARE_BRACKET:\n        {\n          this.state = State.CDATA_SECTION_BRACKET;\n          break;\n        }\n      case $.EOF:\n        {\n          this._err(ERR.eofInCdata);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // CDATA section bracket state\n  //------------------------------------------------------------------\n  _stateCdataSectionBracket(cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = State.CDATA_SECTION_END;\n    } else {\n      this._emitChars(']');\n      this.state = State.CDATA_SECTION;\n      this._stateCdataSection(cp);\n    }\n  }\n  // CDATA section end state\n  //------------------------------------------------------------------\n  _stateCdataSectionEnd(cp) {\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          break;\n        }\n      case $.RIGHT_SQUARE_BRACKET:\n        {\n          this._emitChars(']');\n          break;\n        }\n      default:\n        {\n          this._emitChars(']]');\n          this.state = State.CDATA_SECTION;\n          this._stateCdataSection(cp);\n        }\n    }\n  }\n  // Character reference state\n  //------------------------------------------------------------------\n  _stateCharacterReference() {\n    let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n    if (length < 0) {\n      if (this.preprocessor.lastChunkWritten) {\n        length = this.entityDecoder.end();\n      } else {\n        // Wait for the rest of the entity.\n        this.active = false;\n        // Mark the entire buffer as read.\n        this.preprocessor.pos = this.preprocessor.html.length - 1;\n        this.consumedAfterSnapshot = 0;\n        this.preprocessor.endOfChunkHit = true;\n        return;\n      }\n    }\n    if (length === 0) {\n      // This was not a valid entity. Go back to the beginning, and\n      // figure out what to do.\n      this.preprocessor.pos = this.entityStartPos;\n      this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n      this.state = !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1)) ? State.AMBIGUOUS_AMPERSAND : this.returnState;\n    } else {\n      // We successfully parsed an entity. Switch to the return state.\n      this.state = this.returnState;\n    }\n  }\n  // Ambiguos ampersand state\n  //------------------------------------------------------------------\n  _stateAmbiguousAmpersand(cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    } else {\n      if (cp === $.SEMICOLON) {\n        this._err(ERR.unknownNamedCharacterReference);\n      }\n      this.state = this.returnState;\n      this._callState(cp);\n    }\n  }\n}","map":{"version":3,"names":["Preprocessor","CODE_POINTS","$","SEQUENCES","$$","REPLACEMENT_CHARACTER","isSurrogate","isUndefinedCodePoint","isControlCodePoint","TokenType","getTokenAttr","htmlDecodeTree","EntityDecoder","DecodingMode","ERR","TAG_ID","getTagID","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","getErrorForNumericCharacterReference","code","NULL","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","CARRIAGE_RETURN","controlCharacterReference","Tokenizer","constructor","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","value","preprocessor","currentLocation","getCurrentLocation","entityDecoder","consumed","pos","_flushCodePointConsumedAsCharacterReference","onParseError","missingSemicolonAfterCharacterReference","_err","absenceOfDigitsInNumericCharacterReference","validateNumericCharacterReference","error","undefined","cpOffset","_a","_b","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","advance","_advanceBy","count","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","length","_createStartTagToken","type","START_TAG","tagName","tagID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","push","attrLocations","Object","create","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","String","fromCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","startEntity","_isCharacterReferenceInAttribute","Attribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","peek","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SCRIPT","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","html","lastChunkWritten","end","SEMICOLON","unknownNamedCharacterReference"],"sources":["C:/Users/Owner/certifystack/node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/index.js"],"sourcesContent":["import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/decode';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}