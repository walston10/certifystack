{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\certifystack\\\\src\\\\components\\\\FlashcardPracticeModal.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getLessonsWithFlashcards, getFlashcardsByLesson } from '../data/courses/network-plus/flashcards';\nimport '../styles/FlashcardPracticeModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FlashcardPracticeModal({\n  isOpen,\n  onClose\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [lessons, setLessons] = useState([]);\n  const [selectedLessons, setSelectedLessons] = useState(new Set());\n  useEffect(() => {\n    if (isOpen) {\n      setLessons(getLessonsWithFlashcards());\n    }\n  }, [isOpen]);\n  const handleToggleLesson = lessonId => {\n    const newSelection = new Set(selectedLessons);\n    if (newSelection.has(lessonId)) {\n      newSelection.delete(lessonId);\n    } else {\n      newSelection.add(lessonId);\n    }\n    setSelectedLessons(newSelection);\n  };\n  const handleSelectAll = e => {\n    if (e.target.checked) {\n      const allLessonIds = new Set(lessons.map(l => l.id));\n      setSelectedLessons(allLessonIds);\n    } else {\n      setSelectedLessons(new Set());\n    }\n  };\n  const handleStartSession = () => {\n    let bulkCards = [];\n    selectedLessons.forEach(lessonId => {\n      bulkCards = [...bulkCards, ...getFlashcardsByLesson(lessonId)];\n    });\n\n    // Shuffle the combined deck\n    for (let i = bulkCards.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [bulkCards[i], bulkCards[j]] = [bulkCards[j], bulkCards[i]];\n    }\n    onClose();\n    // We'll create the /practice/flashcards route and view in the next step\n    // For now, this will navigate to a page that needs to be created.\n    navigate('/practice/flashcards', {\n      state: {\n        cards: bulkCards\n      }\n    });\n  };\n  if (!isOpen) {\n    return null;\n  }\n  const totalSelectedCards = lessons.filter(l => selectedLessons.has(l.id)).reduce((sum, l) => sum + l.cardCount, 0);\n  const isAllSelected = selectedLessons.size > 0 && selectedLessons.size === lessons.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content flashcard-modal\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a Custom Flashcard Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select the topics you want to practice. The cards will be shuffled into one deck.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lesson-selection-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-all-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"select-all\",\n            checked: isAllSelected,\n            onChange: handleSelectAll\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"select-all\",\n            children: \"Select All / Deselect All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), lessons.map(lesson => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lesson-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `lesson-${lesson.id}`,\n            checked: selectedLessons.has(lesson.id),\n            onChange: () => handleToggleLesson(lesson.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `lesson-${lesson.id}`,\n            children: [`Lesson ${lesson.id}: ${lesson.title}`, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"card-count\",\n              children: [\"(\", lesson.cardCount, \" cards)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, lesson.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-cancel\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-confirm\",\n          onClick: handleStartSession,\n          disabled: selectedLessons.size === 0,\n          children: [\"Start Session (\", totalSelectedCards, \" cards)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(FlashcardPracticeModal, \"jSqfHPAEOLnEPAysFPMVb4nca3k=\", false, function () {\n  return [useNavigate];\n});\n_c = FlashcardPracticeModal;\nexport default FlashcardPracticeModal;\nvar _c;\n$RefreshReg$(_c, \"FlashcardPracticeModal\");","map":{"version":3,"names":["useState","useEffect","useNavigate","getLessonsWithFlashcards","getFlashcardsByLesson","jsxDEV","_jsxDEV","FlashcardPracticeModal","isOpen","onClose","_s","navigate","lessons","setLessons","selectedLessons","setSelectedLessons","Set","handleToggleLesson","lessonId","newSelection","has","delete","add","handleSelectAll","e","target","checked","allLessonIds","map","l","id","handleStartSession","bulkCards","forEach","i","length","j","Math","floor","random","state","cards","totalSelectedCards","filter","reduce","sum","cardCount","isAllSelected","size","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","htmlFor","lesson","title","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Owner/certifystack/src/components/FlashcardPracticeModal.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getLessonsWithFlashcards, getFlashcardsByLesson } from '../data/courses/network-plus/flashcards';\r\nimport '../styles/FlashcardPracticeModal.css';\r\n\r\nfunction FlashcardPracticeModal({ isOpen, onClose }) {\r\n  const navigate = useNavigate();\r\n  const [lessons, setLessons] = useState([]);\r\n  const [selectedLessons, setSelectedLessons] = useState(new Set());\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setLessons(getLessonsWithFlashcards());\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleToggleLesson = (lessonId) => {\r\n    const newSelection = new Set(selectedLessons);\r\n    if (newSelection.has(lessonId)) {\r\n      newSelection.delete(lessonId);\r\n    } else {\r\n      newSelection.add(lessonId);\r\n    }\r\n    setSelectedLessons(newSelection);\r\n  };\r\n\r\n  const handleSelectAll = (e) => {\r\n    if (e.target.checked) {\r\n      const allLessonIds = new Set(lessons.map(l => l.id));\r\n      setSelectedLessons(allLessonIds);\r\n    } else {\r\n      setSelectedLessons(new Set());\r\n    }\r\n  };\r\n\r\n  const handleStartSession = () => {\r\n    let bulkCards = [];\r\n    selectedLessons.forEach(lessonId => {\r\n      bulkCards = [...bulkCards, ...getFlashcardsByLesson(lessonId)];\r\n    });\r\n\r\n    // Shuffle the combined deck\r\n    for (let i = bulkCards.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [bulkCards[i], bulkCards[j]] = [bulkCards[j], bulkCards[i]];\r\n    }\r\n\r\n    onClose();\r\n    // We'll create the /practice/flashcards route and view in the next step\r\n    // For now, this will navigate to a page that needs to be created.\r\n    navigate('/practice/flashcards', { state: { cards: bulkCards } });\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  const totalSelectedCards = lessons\r\n    .filter(l => selectedLessons.has(l.id))\r\n    .reduce((sum, l) => sum + l.cardCount, 0);\r\n\r\n  const isAllSelected = selectedLessons.size > 0 && selectedLessons.size === lessons.length;\r\n\r\n  return (\r\n    <div className=\"modal-overlay\" onClick={onClose}>\r\n      <div className=\"modal-content flashcard-modal\" onClick={(e) => e.stopPropagation()}>\r\n        <h2>Create a Custom Flashcard Session</h2>\r\n        <p>Select the topics you want to practice. The cards will be shuffled into one deck.</p>\r\n\r\n        <div className=\"lesson-selection-list\">\r\n          <div className=\"select-all-container\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"select-all\"\r\n              checked={isAllSelected}\r\n              onChange={handleSelectAll}\r\n            />\r\n            <label htmlFor=\"select-all\">Select All / Deselect All</label>\r\n          </div>\r\n          {lessons.map(lesson => (\r\n            <div key={lesson.id} className=\"lesson-item\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`lesson-${lesson.id}`}\r\n                checked={selectedLessons.has(lesson.id)}\r\n                onChange={() => handleToggleLesson(lesson.id)}\r\n              />\r\n              <label htmlFor={`lesson-${lesson.id}`}>\r\n                {`Lesson ${lesson.id}: ${lesson.title}`}\r\n                <span className=\"card-count\">({lesson.cardCount} cards)</span>\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"modal-actions\">\r\n          <button className=\"btn-cancel\" onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"btn-confirm\"\r\n            onClick={handleStartSession}\r\n            disabled={selectedLessons.size === 0}\r\n          >\r\n            Start Session ({totalSelectedCards} cards)\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlashcardPracticeModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}