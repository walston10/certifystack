{"ast":null,"code":"import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([...IMPLICIT_END_TAG_REQUIRED, $.CAPTION, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nconst SCOPING_ELEMENTS_HTML = new Set([$.APPLET, $.CAPTION, $.HTML, $.MARQUEE, $.OBJECT, $.TABLE, $.TD, $.TEMPLATE, $.TH]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n  get currentTmplContentOrNode() {\n    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n  }\n  constructor(document, treeAdapter, handler) {\n    this.treeAdapter = treeAdapter;\n    this.handler = handler;\n    this.items = [];\n    this.tagIDs = [];\n    this.stackTop = -1;\n    this.tmplCount = 0;\n    this.currentTagId = $.UNKNOWN;\n    this.current = document;\n  }\n  //Index of element\n  _indexOf(element) {\n    return this.items.lastIndexOf(element, this.stackTop);\n  }\n  //Update current element\n  _isInTemplate() {\n    return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n  }\n  _updateCurrentElement() {\n    this.current = this.items[this.stackTop];\n    this.currentTagId = this.tagIDs[this.stackTop];\n  }\n  //Mutations\n  push(element, tagID) {\n    this.stackTop++;\n    this.items[this.stackTop] = element;\n    this.current = element;\n    this.tagIDs[this.stackTop] = tagID;\n    this.currentTagId = tagID;\n    if (this._isInTemplate()) {\n      this.tmplCount++;\n    }\n    this.handler.onItemPush(element, tagID, true);\n  }\n  pop() {\n    const popped = this.current;\n    if (this.tmplCount > 0 && this._isInTemplate()) {\n      this.tmplCount--;\n    }\n    this.stackTop--;\n    this._updateCurrentElement();\n    this.handler.onItemPop(popped, true);\n  }\n  replace(oldElement, newElement) {\n    const idx = this._indexOf(oldElement);\n    this.items[idx] = newElement;\n    if (idx === this.stackTop) {\n      this.current = newElement;\n    }\n  }\n  insertAfter(referenceElement, newElement, newElementID) {\n    const insertionIdx = this._indexOf(referenceElement) + 1;\n    this.items.splice(insertionIdx, 0, newElement);\n    this.tagIDs.splice(insertionIdx, 0, newElementID);\n    this.stackTop++;\n    if (insertionIdx === this.stackTop) {\n      this._updateCurrentElement();\n    }\n    if (this.current && this.currentTagId !== undefined) {\n      this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n  }\n  popUntilTagNamePopped(tagName) {\n    let targetIdx = this.stackTop + 1;\n    do {\n      targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n    } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n    this.shortenToLength(Math.max(targetIdx, 0));\n  }\n  shortenToLength(idx) {\n    while (this.stackTop >= idx) {\n      const popped = this.current;\n      if (this.tmplCount > 0 && this._isInTemplate()) {\n        this.tmplCount -= 1;\n      }\n      this.stackTop--;\n      this._updateCurrentElement();\n      this.handler.onItemPop(popped, this.stackTop < idx);\n    }\n  }\n  popUntilElementPopped(element) {\n    const idx = this._indexOf(element);\n    this.shortenToLength(Math.max(idx, 0));\n  }\n  popUntilPopped(tagNames, targetNS) {\n    const idx = this._indexOfTagNames(tagNames, targetNS);\n    this.shortenToLength(Math.max(idx, 0));\n  }\n  popUntilNumberedHeaderPopped() {\n    this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n  }\n  popUntilTableCellPopped() {\n    this.popUntilPopped(TABLE_CELLS, NS.HTML);\n  }\n  popAllUpToHtmlElement() {\n    //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n    //we perform this fast stack clean up.\n    this.tmplCount = 0;\n    this.shortenToLength(1);\n  }\n  _indexOfTagNames(tagNames, namespace) {\n    for (let i = this.stackTop; i >= 0; i--) {\n      if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  clearBackTo(tagNames, targetNS) {\n    const idx = this._indexOfTagNames(tagNames, targetNS);\n    this.shortenToLength(idx + 1);\n  }\n  clearBackToTableContext() {\n    this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n  }\n  clearBackToTableBodyContext() {\n    this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n  }\n  clearBackToTableRowContext() {\n    this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n  }\n  remove(element) {\n    const idx = this._indexOf(element);\n    if (idx >= 0) {\n      if (idx === this.stackTop) {\n        this.pop();\n      } else {\n        this.items.splice(idx, 1);\n        this.tagIDs.splice(idx, 1);\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(element, false);\n      }\n    }\n  }\n  //Search\n  tryPeekProperlyNestedBodyElement() {\n    //Properly nested <body> element (should be second element in stack).\n    return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n  }\n  contains(element) {\n    return this._indexOf(element) > -1;\n  }\n  getCommonAncestor(element) {\n    const elementIdx = this._indexOf(element) - 1;\n    return elementIdx >= 0 ? this.items[elementIdx] : null;\n  }\n  isRootHtmlElementCurrent() {\n    return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n  }\n  //Element in scope\n  hasInDynamicScope(tagName, htmlScope) {\n    for (let i = this.stackTop; i >= 0; i--) {\n      const tn = this.tagIDs[i];\n      switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n        case NS.HTML:\n          {\n            if (tn === tagName) return true;\n            if (htmlScope.has(tn)) return false;\n            break;\n          }\n        case NS.SVG:\n          {\n            if (SCOPING_ELEMENTS_SVG.has(tn)) return false;\n            break;\n          }\n        case NS.MATHML:\n          {\n            if (SCOPING_ELEMENTS_MATHML.has(tn)) return false;\n            break;\n          }\n      }\n    }\n    return true;\n  }\n  hasInScope(tagName) {\n    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n  }\n  hasInListItemScope(tagName) {\n    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n  }\n  hasInButtonScope(tagName) {\n    return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n  }\n  hasNumberedHeaderInScope() {\n    for (let i = this.stackTop; i >= 0; i--) {\n      const tn = this.tagIDs[i];\n      switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n        case NS.HTML:\n          {\n            if (NUMBERED_HEADERS.has(tn)) return true;\n            if (SCOPING_ELEMENTS_HTML.has(tn)) return false;\n            break;\n          }\n        case NS.SVG:\n          {\n            if (SCOPING_ELEMENTS_SVG.has(tn)) return false;\n            break;\n          }\n        case NS.MATHML:\n          {\n            if (SCOPING_ELEMENTS_MATHML.has(tn)) return false;\n            break;\n          }\n      }\n    }\n    return true;\n  }\n  hasInTableScope(tagName) {\n    for (let i = this.stackTop; i >= 0; i--) {\n      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n        continue;\n      }\n      switch (this.tagIDs[i]) {\n        case tagName:\n          {\n            return true;\n          }\n        case $.TABLE:\n        case $.HTML:\n          {\n            return false;\n          }\n      }\n    }\n    return true;\n  }\n  hasTableBodyContextInTableScope() {\n    for (let i = this.stackTop; i >= 0; i--) {\n      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n        continue;\n      }\n      switch (this.tagIDs[i]) {\n        case $.TBODY:\n        case $.THEAD:\n        case $.TFOOT:\n          {\n            return true;\n          }\n        case $.TABLE:\n        case $.HTML:\n          {\n            return false;\n          }\n      }\n    }\n    return true;\n  }\n  hasInSelectScope(tagName) {\n    for (let i = this.stackTop; i >= 0; i--) {\n      if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n        continue;\n      }\n      switch (this.tagIDs[i]) {\n        case tagName:\n          {\n            return true;\n          }\n        case $.OPTION:\n        case $.OPTGROUP:\n          {\n            break;\n          }\n        default:\n          {\n            return false;\n          }\n      }\n    }\n    return true;\n  }\n  //Implied end tags\n  generateImpliedEndTags() {\n    while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n      this.pop();\n    }\n  }\n  generateImpliedEndTagsThoroughly() {\n    while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n      this.pop();\n    }\n  }\n  generateImpliedEndTagsWithExclusion(exclusionId) {\n    while (this.currentTagId !== undefined && this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n      this.pop();\n    }\n  }\n}","map":{"version":3,"names":["TAG_ID","$","NS","NUMBERED_HEADERS","IMPLICIT_END_TAG_REQUIRED","Set","DD","DT","LI","OPTGROUP","OPTION","P","RB","RP","RT","RTC","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","CAPTION","COLGROUP","TBODY","TD","TFOOT","TH","THEAD","TR","SCOPING_ELEMENTS_HTML","APPLET","HTML","MARQUEE","OBJECT","TABLE","TEMPLATE","SCOPING_ELEMENTS_HTML_LIST","OL","UL","SCOPING_ELEMENTS_HTML_BUTTON","BUTTON","SCOPING_ELEMENTS_MATHML","ANNOTATION_XML","MI","MN","MO","MS","MTEXT","SCOPING_ELEMENTS_SVG","DESC","FOREIGN_OBJECT","TITLE","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","currentTmplContentOrNode","_isInTemplate","treeAdapter","getTemplateContent","current","constructor","document","handler","items","tagIDs","stackTop","tmplCount","currentTagId","UNKNOWN","_indexOf","element","lastIndexOf","getNamespaceURI","_updateCurrentElement","push","tagID","onItemPush","pop","popped","onItemPop","replace","oldElement","newElement","idx","insertAfter","referenceElement","newElementID","insertionIdx","splice","undefined","popUntilTagNamePopped","tagName","targetIdx","shortenToLength","Math","max","popUntilElementPopped","popUntilPopped","tagNames","targetNS","_indexOfTagNames","popUntilNumberedHeaderPopped","popUntilTableCellPopped","popAllUpToHtmlElement","namespace","i","has","clearBackTo","clearBackToTableContext","clearBackToTableBodyContext","clearBackToTableRowContext","remove","tryPeekProperlyNestedBodyElement","BODY","contains","getCommonAncestor","elementIdx","isRootHtmlElementCurrent","hasInDynamicScope","htmlScope","tn","SVG","MATHML","hasInScope","hasInListItemScope","hasInButtonScope","hasNumberedHeaderInScope","hasInTableScope","hasTableBodyContextInTableScope","hasInSelectScope","generateImpliedEndTags","generateImpliedEndTagsThoroughly","generateImpliedEndTagsWithExclusion","exclusionId"],"sources":["C:/Users/Owner/certifystack/node_modules/hast-util-raw/node_modules/parse5/dist/parser/open-element-stack.js"],"sourcesContent":["import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENTS_HTML = new Set([\n    $.APPLET,\n    $.CAPTION,\n    $.HTML,\n    $.MARQUEE,\n    $.OBJECT,\n    $.TABLE,\n    $.TD,\n    $.TEMPLATE,\n    $.TH,\n]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        if (this.current && this.currentTagId !== undefined) {\n            this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n        }\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(Math.max(targetIdx, 0));\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(Math.max(idx, 0));\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(Math.max(idx, 0));\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInDynamicScope(tagName, htmlScope) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (tn === tagName)\n                        return true;\n                    if (htmlScope.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n    }\n    hasInListItemScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n    }\n    hasInButtonScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (NUMBERED_HEADERS.has(tn))\n                        return true;\n                    if (SCOPING_ELEMENTS_HTML.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.OPTION:\n                case $.OPTGROUP: {\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== undefined &&\n            this.currentTagId !== exclusionId &&\n            IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}