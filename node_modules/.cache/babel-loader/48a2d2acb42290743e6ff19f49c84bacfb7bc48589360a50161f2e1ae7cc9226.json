{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\certifystack\\\\src\\\\components\\\\TopologyActivity.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../styles/TopologyActivity.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst topologies = [{\n  id: 'star',\n  name: 'Star Topology',\n  description: 'All devices connect to a central hub or switch'\n}, {\n  id: 'mesh',\n  name: 'Mesh Topology',\n  description: 'Devices have multiple connections creating redundant paths'\n}, {\n  id: 'bus',\n  name: 'Bus Topology',\n  description: 'All devices connect to a single backbone cable'\n}, {\n  id: 'ring',\n  name: 'Ring Topology',\n  description: 'Devices connect in a circular loop'\n}, {\n  id: 'hybrid',\n  name: 'Hybrid Topology',\n  description: 'Combination of two or more topologies'\n}, {\n  id: 'point-to-point',\n  name: 'Point-to-Point',\n  description: 'Direct connection between exactly two devices'\n}];\nconst scenarios = [{\n  id: 1,\n  scenario: 'Modern office where every computer connects to a switch in the wiring closet',\n  correctAnswer: 'star',\n  hint: 'Most common in LANs today'\n}, {\n  id: 2,\n  scenario: 'Five branch offices interconnected with multiple redundant paths between critical locations',\n  correctAnswer: 'mesh',\n  hint: 'Used for WANs and critical infrastructure'\n}, {\n  id: 3,\n  scenario: 'Legacy 1990s network with coaxial cable running through the office with terminators at both ends',\n  correctAnswer: 'bus',\n  hint: 'Obsolete technology'\n}, {\n  id: 4,\n  scenario: 'Token Ring network where data passes through each device until reaching destination',\n  correctAnswer: 'ring',\n  hint: 'Used token passing protocol'\n}, {\n  id: 5,\n  scenario: 'University campus with star topology in buildings, connected by fiber ring between buildings',\n  correctAnswer: 'hybrid',\n  hint: 'Combination of multiple topologies'\n}, {\n  id: 6,\n  scenario: 'Two buildings connected by a dedicated fiber optic cable',\n  correctAnswer: 'point-to-point',\n  hint: 'Simplest topology, exactly 2 devices'\n}];\nfunction TopologyActivity() {\n  _s();\n  const [assignments, setAssignments] = useState({});\n  const [feedback, setFeedback] = useState({});\n  const [isChecked, setIsChecked] = useState(false);\n  const [score, setScore] = useState(0);\n  const handleDrop = (scenarioId, topologyId) => {\n    if (isChecked) return; // Don't allow changes after checking\n\n    setAssignments(prev => ({\n      ...prev,\n      [scenarioId]: topologyId\n    }));\n    setFeedback(prev => ({\n      ...prev,\n      [scenarioId]: null\n    }));\n  };\n  const handleCheck = () => {\n    const newFeedback = {};\n    let correctCount = 0;\n    scenarios.forEach(scenario => {\n      const isCorrect = assignments[scenario.id] === scenario.correctAnswer;\n      newFeedback[scenario.id] = isCorrect;\n      if (isCorrect) correctCount++;\n    });\n    setFeedback(newFeedback);\n    setScore(correctCount);\n    setIsChecked(true);\n  };\n  const handleReset = () => {\n    setAssignments({});\n    setFeedback({});\n    setIsChecked(false);\n    setScore(0);\n  };\n  const allAssigned = scenarios.every(s => assignments[s.id]);\n  const perfectScore = isChecked && score === scenarios.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"topology-activity\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83C\\uDFAE Topology Matching Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Match each real-world scenario with the correct network topology by clicking the topology buttons below each scenario.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), perfectScore && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: [\"\\uD83C\\uDF89 Perfect Score! You've mastered network topologies! All \", scenarios.length, \" scenarios matched correctly!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scenarios-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Real-World Scenarios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), scenarios.map(scenario => {\n          var _topologies$find, _topologies$find2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `scenario-card ${feedback[scenario.id] === true ? 'correct' : feedback[scenario.id] === false ? 'incorrect' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"scenario-number\",\n              children: [\"Scenario \", scenario.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"scenario-text\",\n              children: scenario.scenario\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), assignments[scenario.id] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-topology\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Selected:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this), \" \", (_topologies$find = topologies.find(t => t.id === assignments[scenario.id])) === null || _topologies$find === void 0 ? void 0 : _topologies$find.name, feedback[scenario.id] === true && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon\",\n                children: \"\\u2713\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 54\n              }, this), feedback[scenario.id] === false && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon\",\n                children: \"\\u2717\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 55\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), feedback[scenario.id] === false && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"correction\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct Answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), \" \", (_topologies$find2 = topologies.find(t => t.id === scenario.correctAnswer)) === null || _topologies$find2 === void 0 ? void 0 : _topologies$find2.name, /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"hint\",\n                children: [\"\\uD83D\\uDCA1 \", scenario.hint]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), !isChecked && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"topology-buttons\",\n              children: topologies.map(topology => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `topology-btn ${assignments[scenario.id] === topology.id ? 'selected' : ''}`,\n                onClick: () => handleDrop(scenario.id, topology.id),\n                children: topology.name\n              }, topology.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this)]\n          }, scenario.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reference-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDCDA Topology Reference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), topologies.map(topology => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reference-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"topology-name\",\n            children: topology.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"topology-description\",\n            children: topology.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, topology.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: !isChecked ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"check-btn\",\n            onClick: handleCheck,\n            disabled: !allAssigned,\n            children: allAssigned ? 'Check Answers' : `Assign All Scenarios (${Object.keys(assignments).length}/${scenarios.length})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-display\",\n              children: [\"Score: \", score, \"/\", scenarios.length, \" (\", Math.round(score / scenarios.length * 100), \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reset-btn\",\n              onClick: handleReset,\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-tips\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uD83D\\uDCA1 Tips for Success:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Star:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), \" Central device (most common in modern offices)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Mesh:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), \" Multiple paths, redundancy (WANs, critical systems)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Bus:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), \" Single cable, obsolete (1980s-90s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Ring:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), \" Circular, token passing, mostly obsolete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hybrid:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), \" Combination of topologies (real-world networks)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Point-to-Point:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), \" Two devices only (building-to-building connections)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(TopologyActivity, \"88yXxdxInQ8XMJYrmhUll67HWYg=\");\n_c = TopologyActivity;\nexport default TopologyActivity;\nvar _c;\n$RefreshReg$(_c, \"TopologyActivity\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","topologies","id","name","description","scenarios","scenario","correctAnswer","hint","TopologyActivity","_s","assignments","setAssignments","feedback","setFeedback","isChecked","setIsChecked","score","setScore","handleDrop","scenarioId","topologyId","prev","handleCheck","newFeedback","correctCount","forEach","isCorrect","handleReset","allAssigned","every","s","perfectScore","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_topologies$find","_topologies$find2","find","t","topology","onClick","disabled","Object","keys","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/Owner/certifystack/src/components/TopologyActivity.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '../styles/TopologyActivity.css';\r\n\r\nconst topologies = [\r\n  { id: 'star', name: 'Star Topology', description: 'All devices connect to a central hub or switch' },\r\n  { id: 'mesh', name: 'Mesh Topology', description: 'Devices have multiple connections creating redundant paths' },\r\n  { id: 'bus', name: 'Bus Topology', description: 'All devices connect to a single backbone cable' },\r\n  { id: 'ring', name: 'Ring Topology', description: 'Devices connect in a circular loop' },\r\n  { id: 'hybrid', name: 'Hybrid Topology', description: 'Combination of two or more topologies' },\r\n  { id: 'point-to-point', name: 'Point-to-Point', description: 'Direct connection between exactly two devices' }\r\n];\r\n\r\nconst scenarios = [\r\n  {\r\n    id: 1,\r\n    scenario: 'Modern office where every computer connects to a switch in the wiring closet',\r\n    correctAnswer: 'star',\r\n    hint: 'Most common in LANs today'\r\n  },\r\n  {\r\n    id: 2,\r\n    scenario: 'Five branch offices interconnected with multiple redundant paths between critical locations',\r\n    correctAnswer: 'mesh',\r\n    hint: 'Used for WANs and critical infrastructure'\r\n  },\r\n  {\r\n    id: 3,\r\n    scenario: 'Legacy 1990s network with coaxial cable running through the office with terminators at both ends',\r\n    correctAnswer: 'bus',\r\n    hint: 'Obsolete technology'\r\n  },\r\n  {\r\n    id: 4,\r\n    scenario: 'Token Ring network where data passes through each device until reaching destination',\r\n    correctAnswer: 'ring',\r\n    hint: 'Used token passing protocol'\r\n  },\r\n  {\r\n    id: 5,\r\n    scenario: 'University campus with star topology in buildings, connected by fiber ring between buildings',\r\n    correctAnswer: 'hybrid',\r\n    hint: 'Combination of multiple topologies'\r\n  },\r\n  {\r\n    id: 6,\r\n    scenario: 'Two buildings connected by a dedicated fiber optic cable',\r\n    correctAnswer: 'point-to-point',\r\n    hint: 'Simplest topology, exactly 2 devices'\r\n  }\r\n];\r\n\r\nfunction TopologyActivity() {\r\n  const [assignments, setAssignments] = useState({});\r\n  const [feedback, setFeedback] = useState({});\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const handleDrop = (scenarioId, topologyId) => {\r\n    if (isChecked) return; // Don't allow changes after checking\r\n    \r\n    setAssignments(prev => ({\r\n      ...prev,\r\n      [scenarioId]: topologyId\r\n    }));\r\n    setFeedback(prev => ({\r\n      ...prev,\r\n      [scenarioId]: null\r\n    }));\r\n  };\r\n\r\n  const handleCheck = () => {\r\n    const newFeedback = {};\r\n    let correctCount = 0;\r\n\r\n    scenarios.forEach(scenario => {\r\n      const isCorrect = assignments[scenario.id] === scenario.correctAnswer;\r\n      newFeedback[scenario.id] = isCorrect;\r\n      if (isCorrect) correctCount++;\r\n    });\r\n\r\n    setFeedback(newFeedback);\r\n    setScore(correctCount);\r\n    setIsChecked(true);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setAssignments({});\r\n    setFeedback({});\r\n    setIsChecked(false);\r\n    setScore(0);\r\n  };\r\n\r\n  const allAssigned = scenarios.every(s => assignments[s.id]);\r\n  const perfectScore = isChecked && score === scenarios.length;\r\n\r\n  return (\r\n    <div className=\"topology-activity\">\r\n      <h2>🎮 Topology Matching Challenge</h2>\r\n      <p>Match each real-world scenario with the correct network topology by clicking the topology buttons below each scenario.</p>\r\n\r\n      {perfectScore && (\r\n        <div className=\"success-message\">\r\n          🎉 Perfect Score! You've mastered network topologies! All {scenarios.length} scenarios matched correctly!\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"activity-container\">\r\n        <div className=\"scenarios-section\">\r\n          <h3>Real-World Scenarios</h3>\r\n          \r\n          {scenarios.map(scenario => (\r\n            <div \r\n              key={scenario.id}\r\n              className={`scenario-card ${\r\n                feedback[scenario.id] === true ? 'correct' : \r\n                feedback[scenario.id] === false ? 'incorrect' : ''\r\n              }`}\r\n            >\r\n              <div className=\"scenario-number\">Scenario {scenario.id}</div>\r\n              <div className=\"scenario-text\">{scenario.scenario}</div>\r\n              \r\n              {assignments[scenario.id] && (\r\n                <div className=\"selected-topology\">\r\n                  <strong>Selected:</strong> {topologies.find(t => t.id === assignments[scenario.id])?.name}\r\n                  {feedback[scenario.id] === true && <span className=\"icon\">✓</span>}\r\n                  {feedback[scenario.id] === false && <span className=\"icon\">✗</span>}\r\n                </div>\r\n              )}\r\n\r\n              {feedback[scenario.id] === false && (\r\n                <div className=\"correction\">\r\n                  <strong>Correct Answer:</strong> {topologies.find(t => t.id === scenario.correctAnswer)?.name}\r\n                  <div className=\"hint\">💡 {scenario.hint}</div>\r\n                </div>\r\n              )}\r\n\r\n              {!isChecked && (\r\n                <div className=\"topology-buttons\">\r\n                  {topologies.map(topology => (\r\n                    <button\r\n                      key={topology.id}\r\n                      className={`topology-btn ${assignments[scenario.id] === topology.id ? 'selected' : ''}`}\r\n                      onClick={() => handleDrop(scenario.id, topology.id)}\r\n                    >\r\n                      {topology.name}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"reference-section\">\r\n          <h3>📚 Topology Reference</h3>\r\n          {topologies.map(topology => (\r\n            <div key={topology.id} className=\"reference-card\">\r\n              <div className=\"topology-name\">{topology.name}</div>\r\n              <div className=\"topology-description\">{topology.description}</div>\r\n            </div>\r\n          ))}\r\n\r\n          <div className=\"controls\">\r\n            {!isChecked ? (\r\n              <button \r\n                className=\"check-btn\"\r\n                onClick={handleCheck}\r\n                disabled={!allAssigned}\r\n              >\r\n                {allAssigned ? 'Check Answers' : `Assign All Scenarios (${Object.keys(assignments).length}/${scenarios.length})`}\r\n              </button>\r\n            ) : (\r\n              <>\r\n                <div className=\"score-display\">\r\n                  Score: {score}/{scenarios.length} ({Math.round((score/scenarios.length) * 100)}%)\r\n                </div>\r\n                <button className=\"reset-btn\" onClick={handleReset}>\r\n                  Try Again\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"activity-tips\">\r\n        <h4>💡 Tips for Success:</h4>\r\n        <ul>\r\n          <li><strong>Star:</strong> Central device (most common in modern offices)</li>\r\n          <li><strong>Mesh:</strong> Multiple paths, redundancy (WANs, critical systems)</li>\r\n          <li><strong>Bus:</strong> Single cable, obsolete (1980s-90s)</li>\r\n          <li><strong>Ring:</strong> Circular, token passing, mostly obsolete</li>\r\n          <li><strong>Hybrid:</strong> Combination of topologies (real-world networks)</li>\r\n          <li><strong>Point-to-Point:</strong> Two devices only (building-to-building connections)</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopologyActivity;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}